// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma-client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/dev.db"
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // OAuth accounts
  accounts Account[]

  // User content and relationships
  projects   Project[]
  tasks      Task[]
  assets     Asset[]
  comments   Comment[]
  checklists Checklist[]
  events     CalendarEvent[]

  // Team relationships
  ownedTeams  Team[]       @relation("TeamOwner")
  memberTeams TeamMember[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Content planning models
model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("PLANNING") // PLANNING, IN_PROGRESS, COMPLETED
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId     String
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks      Task[]
  assets     Asset[]
  checklists Checklist[]
  events     CalendarEvent[]
  teamId     String?
  team       Team?           @relation(fields: [teamId], references: [id])

  @@index([userId])
  @@index([teamId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("TODO") // TODO, IN_PROGRESS, COMPLETED
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  assignedTo String?
  comments   Comment[]

  @@index([userId])
  @@index([projectId])
}

model Asset {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String // IMAGE, VIDEO, AUDIO, DOCUMENT, OTHER
  url         String
  key         String // S3 key
  size        Int // Size in bytes
  mimeType    String
  tags        String // Stored as JSON string of array values
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  comments  Comment[]

  @@index([userId])
  @@index([projectId])
}

model Checklist {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   @default("SHOOTING") // SHOOTING, RECORDING, EDITING, PUBLISHING
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project?        @relation(fields: [projectId], references: [id], onDelete: SetNull)
  items     ChecklistItem[]

  @@index([userId])
  @@index([projectId])
}

model ChecklistItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  isCompleted Boolean  @default(false)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@index([checklistId])
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  isAllDay    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([projectId])
}

// Collaboration models
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  ownerId  String
  owner    User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members  TeamMember[]
  projects Project[]

  @@index([ownerId])
}

model TeamMember {
  id        String   @id @default(cuid())
  role      String   @default("MEMBER") // OWNER, ADMIN, MEMBER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId  String?
  task    Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assetId String?
  asset   Asset?  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
  @@index([assetId])
}
